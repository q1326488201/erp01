// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"app/dao/models"
)

func newAuthMenu(db *gorm.DB, opts ...gen.DOOption) authMenu {
	_authMenu := authMenu{}

	_authMenu.authMenuDo.UseDB(db, opts...)
	_authMenu.authMenuDo.UseModel(&models.AuthMenu{})

	tableName := _authMenu.authMenuDo.TableName()
	_authMenu.ALL = field.NewAsterisk(tableName)
	_authMenu.ID = field.NewInt64(tableName, "id")
	_authMenu.CreatedAt = field.NewTime(tableName, "created_at")
	_authMenu.UpdatedAt = field.NewTime(tableName, "updated_at")
	_authMenu.DeletedAt = field.NewField(tableName, "deleted_at")
	_authMenu.Name = field.NewString(tableName, "name")
	_authMenu.ParentID = field.NewInt64(tableName, "parentId")
	_authMenu.URL = field.NewString(tableName, "url")
	_authMenu.Perms = field.NewString(tableName, "perms")
	_authMenu.Icon = field.NewString(tableName, "icon")
	_authMenu.OrderNum = field.NewInt64(tableName, "orderNum")
	_authMenu.VuePath = field.NewString(tableName, "vuePath")
	_authMenu.VueComponent = field.NewString(tableName, "vueComponent")
	_authMenu.VueRedirect = field.NewString(tableName, "vueRedirect")
	_authMenu.Ftype = field.NewInt64(tableName, "ftype")

	_authMenu.fillFieldMap()

	return _authMenu
}

type authMenu struct {
	authMenuDo

	ALL          field.Asterisk
	ID           field.Int64
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	Name         field.String
	ParentID     field.Int64
	URL          field.String
	Perms        field.String
	Icon         field.String
	OrderNum     field.Int64
	VuePath      field.String
	VueComponent field.String
	VueRedirect  field.String
	Ftype        field.Int64

	fieldMap map[string]field.Expr
}

func (a authMenu) Table(newTableName string) *authMenu {
	a.authMenuDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a authMenu) As(alias string) *authMenu {
	a.authMenuDo.DO = *(a.authMenuDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *authMenu) updateTableName(table string) *authMenu {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.Name = field.NewString(table, "name")
	a.ParentID = field.NewInt64(table, "parentId")
	a.URL = field.NewString(table, "url")
	a.Perms = field.NewString(table, "perms")
	a.Icon = field.NewString(table, "icon")
	a.OrderNum = field.NewInt64(table, "orderNum")
	a.VuePath = field.NewString(table, "vuePath")
	a.VueComponent = field.NewString(table, "vueComponent")
	a.VueRedirect = field.NewString(table, "vueRedirect")
	a.Ftype = field.NewInt64(table, "ftype")

	a.fillFieldMap()

	return a
}

func (a *authMenu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *authMenu) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 14)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["name"] = a.Name
	a.fieldMap["parentId"] = a.ParentID
	a.fieldMap["url"] = a.URL
	a.fieldMap["perms"] = a.Perms
	a.fieldMap["icon"] = a.Icon
	a.fieldMap["orderNum"] = a.OrderNum
	a.fieldMap["vuePath"] = a.VuePath
	a.fieldMap["vueComponent"] = a.VueComponent
	a.fieldMap["vueRedirect"] = a.VueRedirect
	a.fieldMap["ftype"] = a.Ftype
}

func (a authMenu) clone(db *gorm.DB) authMenu {
	a.authMenuDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a authMenu) replaceDB(db *gorm.DB) authMenu {
	a.authMenuDo.ReplaceDB(db)
	return a
}

type authMenuDo struct{ gen.DO }

type IAuthMenuDo interface {
	gen.SubQuery
	Debug() IAuthMenuDo
	WithContext(ctx context.Context) IAuthMenuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAuthMenuDo
	WriteDB() IAuthMenuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAuthMenuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAuthMenuDo
	Not(conds ...gen.Condition) IAuthMenuDo
	Or(conds ...gen.Condition) IAuthMenuDo
	Select(conds ...field.Expr) IAuthMenuDo
	Where(conds ...gen.Condition) IAuthMenuDo
	Order(conds ...field.Expr) IAuthMenuDo
	Distinct(cols ...field.Expr) IAuthMenuDo
	Omit(cols ...field.Expr) IAuthMenuDo
	Join(table schema.Tabler, on ...field.Expr) IAuthMenuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAuthMenuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAuthMenuDo
	Group(cols ...field.Expr) IAuthMenuDo
	Having(conds ...gen.Condition) IAuthMenuDo
	Limit(limit int) IAuthMenuDo
	Offset(offset int) IAuthMenuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthMenuDo
	Unscoped() IAuthMenuDo
	Create(values ...*models.AuthMenu) error
	CreateInBatches(values []*models.AuthMenu, batchSize int) error
	Save(values ...*models.AuthMenu) error
	First() (*models.AuthMenu, error)
	Take() (*models.AuthMenu, error)
	Last() (*models.AuthMenu, error)
	Find() ([]*models.AuthMenu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.AuthMenu, err error)
	FindInBatches(result *[]*models.AuthMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.AuthMenu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAuthMenuDo
	Assign(attrs ...field.AssignExpr) IAuthMenuDo
	Joins(fields ...field.RelationField) IAuthMenuDo
	Preload(fields ...field.RelationField) IAuthMenuDo
	FirstOrInit() (*models.AuthMenu, error)
	FirstOrCreate() (*models.AuthMenu, error)
	FindByPage(offset int, limit int) (result []*models.AuthMenu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAuthMenuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a authMenuDo) Debug() IAuthMenuDo {
	return a.withDO(a.DO.Debug())
}

func (a authMenuDo) WithContext(ctx context.Context) IAuthMenuDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a authMenuDo) ReadDB() IAuthMenuDo {
	return a.Clauses(dbresolver.Read)
}

func (a authMenuDo) WriteDB() IAuthMenuDo {
	return a.Clauses(dbresolver.Write)
}

func (a authMenuDo) Session(config *gorm.Session) IAuthMenuDo {
	return a.withDO(a.DO.Session(config))
}

func (a authMenuDo) Clauses(conds ...clause.Expression) IAuthMenuDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a authMenuDo) Returning(value interface{}, columns ...string) IAuthMenuDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a authMenuDo) Not(conds ...gen.Condition) IAuthMenuDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a authMenuDo) Or(conds ...gen.Condition) IAuthMenuDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a authMenuDo) Select(conds ...field.Expr) IAuthMenuDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a authMenuDo) Where(conds ...gen.Condition) IAuthMenuDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a authMenuDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAuthMenuDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a authMenuDo) Order(conds ...field.Expr) IAuthMenuDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a authMenuDo) Distinct(cols ...field.Expr) IAuthMenuDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a authMenuDo) Omit(cols ...field.Expr) IAuthMenuDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a authMenuDo) Join(table schema.Tabler, on ...field.Expr) IAuthMenuDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a authMenuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAuthMenuDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a authMenuDo) RightJoin(table schema.Tabler, on ...field.Expr) IAuthMenuDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a authMenuDo) Group(cols ...field.Expr) IAuthMenuDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a authMenuDo) Having(conds ...gen.Condition) IAuthMenuDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a authMenuDo) Limit(limit int) IAuthMenuDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a authMenuDo) Offset(offset int) IAuthMenuDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a authMenuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthMenuDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a authMenuDo) Unscoped() IAuthMenuDo {
	return a.withDO(a.DO.Unscoped())
}

func (a authMenuDo) Create(values ...*models.AuthMenu) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a authMenuDo) CreateInBatches(values []*models.AuthMenu, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a authMenuDo) Save(values ...*models.AuthMenu) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a authMenuDo) First() (*models.AuthMenu, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.AuthMenu), nil
	}
}

func (a authMenuDo) Take() (*models.AuthMenu, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.AuthMenu), nil
	}
}

func (a authMenuDo) Last() (*models.AuthMenu, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.AuthMenu), nil
	}
}

func (a authMenuDo) Find() ([]*models.AuthMenu, error) {
	result, err := a.DO.Find()
	return result.([]*models.AuthMenu), err
}

func (a authMenuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.AuthMenu, err error) {
	buf := make([]*models.AuthMenu, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a authMenuDo) FindInBatches(result *[]*models.AuthMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a authMenuDo) Attrs(attrs ...field.AssignExpr) IAuthMenuDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a authMenuDo) Assign(attrs ...field.AssignExpr) IAuthMenuDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a authMenuDo) Joins(fields ...field.RelationField) IAuthMenuDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a authMenuDo) Preload(fields ...field.RelationField) IAuthMenuDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a authMenuDo) FirstOrInit() (*models.AuthMenu, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.AuthMenu), nil
	}
}

func (a authMenuDo) FirstOrCreate() (*models.AuthMenu, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.AuthMenu), nil
	}
}

func (a authMenuDo) FindByPage(offset int, limit int) (result []*models.AuthMenu, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a authMenuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a authMenuDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a authMenuDo) Delete(models ...*models.AuthMenu) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *authMenuDo) withDO(do gen.Dao) *authMenuDo {
	a.DO = *do.(*gen.DO)
	return a
}
